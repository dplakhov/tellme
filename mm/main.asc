/*
 * (C) Copyright 2010 Adobe Systems Incorporated. All Rights Reserved.
 *
 * NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance with the 
 * terms of the Adobe license agreement accompanying it.  If you have received this file from a 
 * source other than Adobe, then your use, modification, or distribution of it requires the prior 
 * written permission of Adobe. 
 * THIS CODE AND INFORMATION IS PROVIDED "AS-IS" WITHOUT WARRANTY OF
 * ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
 * PARTICULAR PURPOSE.
 *
 *  THIS CODE IS NOT SUPPORTED BY Adobe Systems Incorporated.
 *
 */


// main.asc file
// server-side actionscript
var recording = false;
var nc;
var ns;
var FMSid = 0;
var pendingConnections = new Object();
var timouts = new Object();
var masterStream = "";
var previews = new Array("","","","");
var streams = new Object();
var hdStreams = new Array();
var nc = new NetConnection();
var ns;
var conferenceStatus = "offline";
var confDuration = 0;
var confTicker;
var memberList;
var lastMessages = new Array();
var connected = new Array();

// Called when a client connects

var serverRe = new RegExp('^https?://([^/]+)/.*$');

application.onAppStart = function()
{   
    //setInterval(checkTimeout,1000);
};


function checkTimeout()
{
	for (i = 0; i < application.clients.length; i++){ 
		//trace(application.clients[i].timeout--);
		if(application.clients[i].timeout<=0){ 
		    application.clients[i].call("nc_message",messageHandler,"All money spent. GIVE US MORE MONEY");
		    application.disconnect(application.clients[i]);
		}
	}
}

function srv_broadcastRequest(name)
{
	for (i = 0; i < application.clients.length; i++){     
	    application.clients[i].call("nc_broadcastRequest",messageHandler,name);
	}
}

function srv_playMaster(name)
{
	fullname = getName(name);
	masterStream = name;
	trace("master stream is: "+masterStream);
	for (i = 0; i < application.clients.length; i++){     
	    application.clients[i].call("nc_playMaster",messageHandler,masterStream,fullname);
	}
	/*
	if (nc.isConnected) nc.close();
	nc.connect("rtmp://localhost/master");
	ns = new NetStream(nc);
	ns.onStatus = function(info) { 
//             trace("Stream Status: " + info.code) 
             if (info.code == "NetStream.Publish.Start") { 
//                trace("The stream is now publishing"); 
             }
//             trace(info.code);           
         } 

	ns.setBufferTime(2);
	var d = new Date();
	*/
        //ns.attach(false);
        if (recording){
    	    //ns.publish("master---"+d.toDateString()+"---"+this.groupId, "append");
    	    ns.attach(streams[masterStream]);
    	    ns.publish("master-"+this.groupId, "append");
    	}    
    	else
    	{
    	    //ns.publish("master---"+d.toDateString()+"---"+this.groupId, "live");
    	    //ns.publish("master-"+this.groupId, "live");
    	    ns.attach(false);
    	}
}

function srv_closeMaster(){
    masterStream = "";
    application.broadcastMsg("nc_closeMaster");
}

function srv_listMembers(group)
{
    var members = new XML();
    members.client = this;
    members.onLoad = function(data){
	//trace(connected);
	this.client.call("nc_recieveMembers",messageHandler,members,connected);
    }
    //trace("http://"+this.server+"/groups/"+group+"/members.xml");
    members.load("http://"+this.server+"/groups/"+group+"/members.xml");
}



function onStatus(status)
{


}

function messageHandler()
{


}

application.onAppStart = function (){ 

nc.connect("rtmp://localhost/master");
ns = new NetStream(nc);
ns.setBufferTime(2);
}

function srv_playPreview(stream,strId)
{
    var tmp = parseInt(strId);
    var s = Stream.get(stream);
    if (recording){
	s.record("append");
    }
    previews[tmp] = stream;
    name = getName(stream);
    trace("GETNAME: "+name);
    application.broadcastMsg("nc_playPreview",stream+";"+strId+";"+name);

}

function srv_stopPreview(strId)
{

    var tmp = parseInt(strId);
    
    previews[tmp] = "";

    application.broadcastMsg("nc_stopPreview",strId);
}

function srv_checkAdmin()
{

    var lv = new LoadVars();
    lv.session_key = this.sessionId;
    lv.group_id = this.groupId;
    lv.client = this;

    lv.onLoad = function(data){
	if (data){
	    if (this.result == "OK"){
		this.client.call("nc_checkAdmin",messageHandler,"OK");
		
		this.client.call("nc_recieveHdMembers",null,hdStreams);
		
	    }
	    else this.client.call("nc_checkAdmin",messageHandler,"FALSE");
	
	}
    }
    lv.load("http://"+this.server+"/groups/can_manage/");
}

function srv_toggleRecording(status)
{
    recording = status;
    if (masterStream != ""){
        if (recording){
    	    ns.attach(streams[masterStream]);
    	    ns.publish("master-"+this.groupId, "append");
    	
    	    for ( keyVar in streams ) {
    		streams[keyVar].record("append");
    	    }
    	
    	
    	}    
    	else
    	{
    	    ns.attach(false);
    	    for ( keyVar in streams ) {
    		streams[keyVar].record(false);
    	    }

    	}
    }
    
}

function srv_getConferenceStatus()
{

    return conferenceStatus+";"+confDuration;
    
}

function srv_setConferenceStatus(status)
{
    conferenceStatus = status;
    switch (conferenceStatus)
    {
	case "offline":
	    confDuration = 0;
	    clearInterval(confTicker);
	    break;
	case "online":
	    confTicker = setInterval(function(){confDuration++},1000);
	    break;
    }
    application.broadcastMsg("nc_setConferenceStatus",conferenceStatus+";"+confDuration);
}

function srv_requestStreams()
{
    var prvNames = new Array();
    //trace("MASTER STREAM IS: "+masterStream);
    mastername = getName(masterStream);
    for (var i = 0; i < previews.length; i++)
    {
	if (previews[i] != "")	prvNames[i] = getName(previews[i]);
	else prvNames[i] = "";
	
    }
    return(new Object({previews:previews,master:masterStream,mastername:mastername,prvnames:prvNames}));
}

function getName(id)
{

    if (memberList != null)
    {
	
	for (var n = 0; n < memberList.firstChild.childNodes.length; n++)
	{
		if (memberList.firstChild.childNodes[n].attributes.id == id){
		    tmp = memberList.firstChild.childNodes[n].childNodes[0].toString();
		    tmp = tmp.replace("<name>","");
		    tmp = tmp.replace("</name>","");
		    return tmp;
		}
		
	}
    } else{ 
	trace("memberList is null");
	return "";
	}


}

function srv_sendMessage(mess)
{
    name = getName(this.userId);
    mess = "<b>"+name+"</b>: "+mess;
    lastMessages.push(mess);
    application.broadcastMsg("nc_chatmessage",mess);
}

function srv_getLastMessages()
{
    trace (lastMessages);
    trace(this.userId);
    return lastMessages;
}

application.onConnect = function(client,id,groupId,session_key,hdname) {
  connected.push(id);
  trace("TRACECONNECTED length: "+connected.length);
  if (hdname != null){
	hdname = hdname.replace(/_/g," ");
//	trace(id+" ; "+groupId+" ; "+session_key+" ; "+hdname);
	client.type = "hd";
	client.hdName = hdname;
	client.publishingStream = "";
	application.acceptConnection(client);
  }
  else
  {
    client.type = "regular";
    var my_lv = new LoadVars(); 
    var logFile = new File("/stat/stat.txt"); 
    logFile.open("text", "readWrite");
    ids = logFile.readAll();
    if (ids.indexOf(id) == -1)
    {
	logFile.write(id+"\n");
    }
    logFile.close();
    client.userId = id;
    client.FMSid = FMSid++;
    client.publishingStream = "";
    client.sessionId = session_key;
    client.groupId = groupId;
    client.server = client.pageUrl.replace(serverRe, '$1');
    trace("server: "+client.server);
    if (client.server == "") client.server = "xn--90acimpsblk.xn--p1ai";
    pendingConnections[my_lv.FMSid] = client;

    application.acceptConnection( pendingConnections[this.FMSid] );
    pendingConnections[this.FMSid].broadcastRequest = srv_broadcastRequest;
    pendingConnections[this.FMSid].setMaster = srv_playMaster;
    pendingConnections[this.FMSid].listMembers = srv_listMembers;
    pendingConnections[this.FMSid].playPreview = srv_playPreview;
    pendingConnections[this.FMSid].stopPreview = srv_stopPreview;
    pendingConnections[this.FMSid].checkAdmin = srv_checkAdmin;
    pendingConnections[this.FMSid].closeMaster = srv_closeMaster;
    pendingConnections[this.FMSid].toggleRecording = srv_toggleRecording;
    pendingConnections[this.FMSid].getConferenceStatus = srv_getConferenceStatus;
    pendingConnections[this.FMSid].setConferenceStatus = srv_setConferenceStatus;    
    pendingConnections[this.FMSid].requestStreams = srv_requestStreams;
    pendingConnections[this.FMSid].sendMessage = srv_sendMessage;
    pendingConnections[this.FMSid].getLastMessages = srv_getLastMessages;
    if (memberList == null)
    {
	memberList = new XML();
	memberList.ignoreWhite = true;
	memberList.client = client;
	memberList.onLoad = function(data){
	}
	memberList.load("http://"+client.server+"/groups/"+groupId+"/members.xml");	    
    }
    application.broadcastMsg("nc_clientConnected",client.userId);
    delete pendingConnections[this.FMSid];
  }//hdname check    
  
   // trace(client.id +" from  "+ client.ip +" is connected");	
}


application.onDisconnect = function(client) {
        for (i = 0; i< connected.length; i++)
        {
    	    if (connected[i] == client.userId) delete connected[i];
        }
	application.broadcastMsg("nc_clientDisconnected",client.userId);
	delete streams[client.publishingStream];
	if (client.publishingStream == masterStream){
	    masterStream = "";
	}
	
	for (i = 0; i < previews.length; i++){
	
	    if (previews[i] == client.publishingStream){
	     previews[i] = "";
	     application.broadcastMsg("nc_stopPreview",i);
	    }
	    
	}
	if (client.publishingStream.match(/^HD\d*$/g))
	{
	    for (j = 0; j < hdStreams.length; j++)
	    {
		if (hdStreams[j]!=null){
		    if (hdStreams[j].streamName == client.publishingStream){
			delete hdStreams[j];
			break;
		    }
		}
	    }
	}

	application.broadcastMsg("nc_clientUnpublish",client.publishingStream);

}


// Called when the client publishes
application.onPublish = function(client, myStream) {
	myStream.record(false);
	
	client.publishingStream = myStream.name;
	streams[myStream.name] = myStream;
	if (myStream.name.match(/^HD\d*$/g))
	{
//	    trace("HD STREAM --- "+myStream.name+" --- IS PUBLISHED");
	
	    application.broadcastMsg("nc_clientHdPublish",myStream.name,client.hdName);
	    //hdStreams[myStream.name] = {hdName:client.hdName,streamName:myStream.name};
	    hdStreams.push({hdName:client.hdName,streamName:myStream.name});
	}
	else trace(myStream.name + " is publishing into application " + application.name);

}

application.onUnpublish = function( client, myStream ) {
//	trace(myStream.name + " is unpublishing");
	if (client.publishingStream == masterStream){
	    masterStream = "";
	}
	delete streams[myStream.name];
	for (i = 0; i < previews.length; i++){
	
	    if (previews[i] == client.publishingStream){
	     previews[i] = "";
	     application.broadcastMsg("nc_stopPreview",i);
	    }
	    
	}
	if (myStream.name.match(/^HD\d*$/g))
	{
	    for (j = 0; j < hdStreams.length; j++)
	    {
		if (hdStreams[j] != null)
		{
		    if (hdStreams[j].streamName == myStream.name){
			delete hdStreams[j];
			break;
		    }
		}
	    }
	}

	application.broadcastMsg("nc_clientUnpublish",myStream.name);
	client.publishingStream = "";

}
